/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

// Global settings, taken from urob config
// https://github.com/urob/zmk-config/blob/784d3ea9351425e9cc11adc45ca34825546e2e99/config/base.keymap#L31

&sk {
    release-after-ms = <900>;
    quick-release;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <16 28 40 58 5 17 29 41 59 75 6 7 8 9 18 19 20 21 30 31 32 33 42 43 44 45 60 61 62 63 76 77 78 79 40 58 58>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 2 3 4>;
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "MAGIC_SHIFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        EscapeCombo {
            bindings = <&kp ESCAPE>;
            key-positions = <41 42>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LGUI  | LOWER | | DEL   | RGUI  | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | ESC   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2           &kp F3       &kp F4             &kp F5                                                                                                     &kp F6        &kp F7              &kp F8       &kp F9                    &kp F10
&kp EQUAL   &kp N1           &kp N2       &kp N3             &kp N4        &kp N5                                                                               &kp N6  &kp N7        &kp N8              &kp N9       &kp N0                    &kp MINUS
&kp TAB     &kp Q            &kp W        &kp E              &kp R         &kp T                                                                                &kp Y   &kp U         &kp I               &kp O        &kp P                     &kp BSLH
&kp ESC     &hml LEFT_GUI A  &hml LALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &kp G                                                                                &kp H   &hmr RCTRL J  &hmr RIGHT_SHIFT K  &hmr RALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp GRAVE   &kp Z            &kp X        &kp C              &kp V         &kp B   &kp LSHFT        &kp LGUI      &layer_td  &kp DELETE  &kp RGUI  &kp RSHFT    &kp N   &kp M         &kp COMMA           &kp DOT      &kp FSLH                  &kp PG_UP
&magic 2 0  &kp HOME         &kp END      &kp LEFT           &kp RIGHT             &lt 5 BACKSPACE  &magic_shift  &kp LALT   &kp RALT    &kp RET   &lt 4 SPACE          &kp UP        &kp DOWN            &kp LBKT     &kp RBKT                  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        symbol_layer {
            bindings = <
&trans            &trans             &trans                &trans                 &trans                                                                                                              &trans         &trans       &trans      &trans      &trans
&kp GRAVE         &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COMMA         &kp PERIOD                                                                     &trans             &trans         &trans       &trans      &trans      &trans
&kp LEFT_BRACKET  &kp EXCLAMATION    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON     &kp QUESTION                                                                   &kp GRAVE          &trans         &trans       &trans      &trans      &trans
&kp POUND         &kp CARET          &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR        &kp ASTERISK                                                                   &kp DOUBLE_QUOTES  &kp BACKSPACE  &kp TAB      &kp SPACE   &kp ENTER   &trans
&kp TILDE         &kp LESS_THAN      &kp PIPE              &kp MINUS              &kp GREATER_THAN  &kp SLASH     &kp BACKSLASH  &kp PERIOD  &kp ASTERISK  &trans  &trans  &trans  &kp SQT            &kp DEL        &kp LS(TAB)  &kp INSERT  &kp ESCAPE  &trans
&trans            &kp AMPERSAND      &kp SQT               &kp DOUBLE_QUOTES      &kp PLUS                        &kp PERCENT    &kp COLON   &kp AT_SIGN   &trans  &trans  &trans                     &trans         &trans       &trans      &trans      &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans    &trans    &trans      &trans                                                                                 &trans           &trans           &trans           &trans  &trans
&trans  &trans    &trans    &trans      &trans     &trans                                                           &trans     &trans           &trans           &trans           &trans  &trans
&trans  &trans    &trans    &trans      &trans     &trans                                                           &kp LS(G)  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &trans                                                           &kp K      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans  &trans    &trans    &trans      &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans           &kp J      &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
&trans  &trans    &trans    &trans      &trans             &trans  &trans  &trans  &trans  &trans  &kp KP_NUMBER_0             &trans           &trans           &trans           &trans  &trans
            >;
        };
    };
};
